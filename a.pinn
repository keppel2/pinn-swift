//var x int;
//var y int;
//x = 23;
//y = x;
//y = 42;
//print(x, y);
//
//
//var a int;
//var b int;
//a = 42;
//b = 101;
//a, b = b, a;
//print(a, b);
//
//
//
//exit();

var j [][1]int;
j[0] = [23];
println(j);
var k [1]int;
k = j[0];
k[0] = 42;
println(j, k);
exit();

E := 0;
B := 1;
W := 2;
INV := 3;
SIZE := 3;
type bt [SIZE][SIZE]int;

var bh []bt;

func bhc(bh []bt) []bt {
  var rt []bt;
  var k int;
  var v bt;
  for k, v = range bh {
    rt[k] = v;
  }
}

func ih(board bt, bhist []bt) bool {
  printBoard(board);
//  println(last(bhist));
  var b2 bt;
  for b2 = range bhist {
    if board == b2 {
      println("beeb", len(bhist));
      printBoard(board);
      printBoard(b2);
      return false;
    }
  }
    return true;

}

func ie(board bt, bhist []bt) {
  if !ih(board, bhist) {
    println("dup");
    exit();
  }
    bhist[len(bh)] = board;
}
var boardA bt;
//boardA = [[B, 0, B, W, 0],
//             [0, B, B, W, W],
//             [B, B, W, 0, W],
//             [B, B, W, W, W],
//             [0, B, W, W, 0]];
boardA = [[0, B, B],
          [B, B, B],
          [W, W, W]];




func printBoard (board bt) {
	var y int;
	var x int;
	for y = range 0:SIZE {
        print (board[y][0]);
		for x = range 1:SIZE {
        print (" ");
        print (board[y][x]);
		}
        println();
	}
	println ("---");
}
func cap (board bt, current int) bt {
      var x int;
    var y int;
    w := 0;
    var b2 bt;
  var be bt;
  var b bool;
                    var c int;
                  var cs int;
    for x = range 0:SIZE {
        for y = range 0:SIZE {
          if board[x][y] != current {
            continue;
          }
          b2 = be;
          current = board[x][y];
          (b2, b) = hasLib(board, b2, current, x, y, false);
          if !b {
            board = clear(board, b2, current);
          }
        }
    }
      return board;
  
  
  
  
}
func hasLib (board bt, b bt, current int, x int, y int, lib bool) (bt, bool) {
      if x < 0 || x >= SIZE || y < 0 || y >= SIZE || b[x][y] == 23{
        return (b, lib);
    }
    if board[x][y] == opposite(current) {
      return (b, lib);
    }
        if board[x][y] == E {
          return (b, true);
      }
        b[x][y] = 23;
        (b, lib) = hasLib(board, b, current, x + 1, y, lib);
        (b, lib) = hasLib(board, b, current, x - 1, y, lib);
        (b, lib) = hasLib(board, b, current, x, y + 1, lib);
        (b, lib) = hasLib(board, b, current, x, y - 1, lib);
        return (b, lib);
}
func clear (board bt, b bt, current int) bt {
  var x int;
  var y int;
  for x = range 0:SIZE {
    for y = range 0:SIZE {
      if b[x][y] == 23 {
        board[x][y] = E;
      }
    }
  }
    return board;
}

func color (board bt, b bt, current int, currentScore int, x int, y int) (bt, int, int) {
    var tup (bt, int, int);
    if x < 0 || x >= SIZE || y < 0 || y >= SIZE || b[x][y] == 23 {
        return (b, current, currentScore);
    }

      if current == INV {
        return (b, current, 0);
      }
    if board[x][y] == E {
          b[x][y] = 23;
        currentScore++;
      (b, current, currentScore) = color(board, b, current, currentScore, x + 1, y);
        (b, current, currentScore) = color(board, b, current, currentScore, x - 1, y);
      (b, current, currentScore) = color(board, b, current, currentScore, x, y + 1);
      (b, current, currentScore) = color(board, b, current, currentScore, x, y - 1);

    } else {
      if current == E {
        current = board[x][y];
      } else if board[x][y] != current {
        current = INV;
        currentScore = 0;
      }
    }
        return (b, current , currentScore);
      
        
    
}
//func cap (board bt) (
func pscore (board bt, player int) int {
  result := score(board);
  return player == B ? result[0] - result[1] : result[1] - result[0];
}
func score (board bt) (int, int) {
    var x int;
    var y int;
    b := 0;
    w := 0;
    var b2 bt;
                    var c int;
                  var cs int;
    for x = range 0:SIZE {
        for y = range 0:SIZE {
          println(x, y);
            if board[x][y] == B {b++;} else
                if board[x][y] == W {w++;} else {

                  
                  (b2, c, cs) = color(board, b2, E, 0, x, y);
                     // (b2, c, cs) = color()
//                  println(tup);
                  if c == B b += cs;
                  if c == W w += cs;
                }
            
        }
    }
        return (b, w);
}



func play (board bt, player int, x int, y int) bt {
  if board[x][y] != E {
    return bt;
  }
    
  board[x][y] = player;
    
  board = cap(board, opposite(player));
  board = cap(board, player);
  return board;
}

func last (bh []bt) bt {
  return bh[len(bh) - 1];
}
func add (bh []bt, b bt) {
  bh[len(bh)] = b;
}

func playb (bh []bt, player int, x int, y int) bool {
  board := play(last(bh), player, x, y);
  printBoard(board);
  if ih(board, bh) {
    ie(board, bh);
    return true;
  }
  return false;
}


func opposite (x int) int { return x == B ? W : B; }
			
func minimax (player int, board bt, bh []bt, passed bool) int
{
  var pb bt;
  var best int;
  var s int;
  var b bool;
  var bh2 []bt;
  if passed {
    best = pscore(board, player);
  } else {
    best = -minimax(opposite(player), board, true);
  }
  
  for x = range 0:SIZE {
    for y = range 0:SIZE {
      bh2 = bhc(bh);
      if board[x][y] == E {
        b = playb(board, bh2, player, x, y);
        if !b { continue; }
//        s = -minimax
        pb = play(board, player, x, y);
        if pscore(pb, player) > best {
          best = pscore(pb, player);
        }
      }
      
      
    }
  }
}









func main() {
  var ok bool;
  println("Initial board");
  var b2 bt;
  var bh []bt;
  add(bh, b2);
  player := B;
  repeat {
    printBoard(last(bh));
    ok = playb(bh, player, rand(SIZE), rand(SIZE));
    player = opposite(player);
    printBoard(last(bh));
    
  } while ok;

}
main();


//heap sort
func left(i int) int {
    return 2 * i;
}
func right(i int) int {
    return 2 * i + 1;
}

//heap := [-1, 16, 4, 10, 14, 7, 9, 3, 2, 8, 1];
heap := [-1, 4, 1, 3, 2, 16, 9, 10, 14, 8, 7];

hsize := len(heap) - 1;
func build_max() {
    var x int;
    for x = hsize / 2; x >= 1; x-- {
        max_heap(x);
    }
}

func max_heap(i int) {
    l := left(i);
    r := right(i);
    if l <= hsize && heap[l] > heap[i] {
        largest := l;
    } else {
        largest := i;
    }
    if r <= hsize && heap[r] > heap[largest] {
        largest = r;
    }
    if largest != i {
        temp := heap[i];
        heap[i] = heap[largest];
        heap[largest] = temp;
        max_heap(largest);

    }
}
func heapsort() {
   var x int;
   var temp int;
   for x = hsize; x >= 2; x -- {
    heap[1], heap[x] = heap[x], heap[1];
      hsize--;
      max_heap(1);
      
   }
}

println(heap);
build_max();
//max_heap(2);
println(heap);
heapsort();
println(heap);

























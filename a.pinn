
E := 0;
B := 1;
W := 2;
INV := 3;
SIZE := 3;
type bt [SIZE][SIZE]int;


var boardA bt;
//boardA = [[B, 0, B, W, 0],
//             [0, B, B, W, W],
//             [B, B, W, 0, W],
//             [B, B, W, W, W],
//             [0, B, W, W, 0]];
boardA = [[0, B, W],
          [B, B, B],
          [W, W, W]];



func printBoard (board bt) {
	var y int;
	var x int;
	for y = range 0:SIZE {
        print (board[0][y]);
		for x = range 1:SIZE {
        print (" ");
        print (board[x][y]);
		}
        println();
	}
	println ("---");
}
func cap (board bt, current int) (bt) {

      var x int;
    var y int;
    b := 0;
    w := 0;
    var b2 bt;
                    var c int;
                  var cs int;
    for x = range 0:SIZE {
        for y = range 0:SIZE {
            if board[x][y] == B {b++;} else
                if board[x][y] == W {w++;} else {

                  
                  (b2, c, cs) = color(board, b2, E, 0, x, y);
                     // (b2, c, cs) = color()
//                  println(tup);
                  if c == B b += cs;
                  if c == W w += cs;
                }
            
        }
    }
        return (b, w);
  
  
  
  
}
func hasLib (board bt, b bt, current int, x int, y int, lib bool) (bt, bool) {
      if x < 0 || x >= SIZE || y < 0 || y >= SIZE {
        return (board, lib);
    }
    if board[x][y] != current {
      return (board, lib);
    }
        if board[x][y] == E {
          return (board, true);
        }
        (board, lib) = clear(board, current, x + 1, y, lib);
        (board, lib) = clear(board, current, x - 1, y, lib);
        (board, lib) = clear(board, current, y + 1, y, lib);
        (board, lib) = clear(board, current, y - 1, y, lib);
  
}
func color (board bt, b bt, current int, currentScore int, x int, y int) (bt, int, int) {
    var tup (bt, int, int);
    if x < 0 || x >= SIZE || y < 0 || y >= SIZE || b[x][y] == 23 {
        return (b, current, currentScore);
    }

      if current == INV {
        return (b, current, 0);
      }
    if board[x][y] == E {
          b[x][y] = 23;
        currentScore++;
      (b, current, currentScore) = color(board, b, current, currentScore, x + 1, y);
        (b, current, currentScore) = color(board, b, current, currentScore, x - 1, y);
      (b, current, currentScore) = color(board, b, current, currentScore, x, y + 1);
      (b, current, currentScore) = color(board, b, current, currentScore, x, y - 1);

    } else {
      if current == E {
        current = board[x][y];
      } else if board[x][y] != current {
        current = INV;
        currentScore = 0;
      }
    }
        return (b, current , currentScore);
      
        
    
}
//func cap (board bt) (
func score (board bt) (int, int) {
    var x int;
    var y int;
    b := 0;
    w := 0;
    var b2 bt;
                    var c int;
                  var cs int;
    for x = range 0:SIZE {
        for y = range 0:SIZE {
          println(x, y);
            if board[x][y] == B {b++;} else
                if board[x][y] == W {w++;} else {

                  
                  (b2, c, cs) = color(board, b2, E, 0, x, y);
                     // (b2, c, cs) = color()
//                  println(tup);
                  if c == B b += cs;
                  if c == W w += cs;
                }
            
        }
    }
        return (b, w);
}








func opposite (x int) int { return x == B ? W : B; }
			
func minimax (player int, board bt) int
{
  result := score(board);
  return 23;
}









func main() {
  
    println("Initial board");

    printBoard(boardA);
  var b2 bt;
  println(color(boardA, b2, 0, 0, 2, 0));
  
  
  
  
    println(score(boardA));
    }
main();


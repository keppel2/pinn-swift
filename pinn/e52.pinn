func mapEqual(m1 [map]int, m2[map]int) bool {
	if len(m1) != len(m2) { return false; }
	k string;
	v int;
	for k, v = range m1 {
		if m2[k] != v { return false; }
	}
	return true;
}

func mapDigits(x int) [map]int {
	rt [map]int;
	if x == 0 {
		rt["0"] = 1;
		return rt;
	}
	while x > 0 {
		rt[stringValue(x % 10)]++;
		x /= 10;
	}
	return rt;
}

func anagram(sl1 int, sl2 int) bool {
	k int;
	v int;
	if mapEqual(mapDigits(sl1), mapDigits(sl2)) {return true;}
	return false;
}

func decDigits(x int) [slice]int {
	rt [slice]int;
	while x > 0 {
		rt[len(rt)] = x % 10;
		x /= 10;
	}
	return rt;
}

func it(x int) bool {
	rt bool;
	k int;
	v int;
	if strLen(stringValue(x)) < strLen(stringValue(x * 6)) {
		return false;
	}
	for k, v = range (2:3) {
		if !anagram(x, x * v) {return false;}
	}
	return true;
}

func main() {
	print(decDigits(1232));
	print (strLen(stringValue(65)));
	print (strLen(stringValue(65 * 2)));
	print (anagram(123, 321));
	print (anagram(133, 321));
	x int = 1;
	while !it(x) {
if x % 1000 == 0 {print("now:", x);}
		x++;
	}
	print(x);
}

EMPTY := 0;
TIE := 3;
PLAYER_A := 1;
PLAYER_B := 2;
SIZE := 3;
var last_board [SIZE * SIZE]int;
var last_board2 [SIZE * SIZE]int;
func coord (x int, y int) int {
	return y * SIZE + x;
}

func printBoard (board [SIZE * SIZE]int) {
	var y int;
	var x int;
	for y = range 0:SIZE {
        print (board[coord(0, y)]);
		for x = range 1:SIZE {
        print (" ");
        print (board[coord(x, y)]);
		}
        println();
	}
	println ("---");
}
func full (board [SIZE * SIZE]int) bool {
    var e int;
    for e = range 0:SIZE * SIZE {
        if board[e] == EMPTY {
            return false;
        }
    }
    return true;
}

func winner (board [SIZE * SIZE]int) int {
	var current int;
	var x int;
	var y int;
	for x = range 0:SIZE {
  // println("alt",current, x, y);
		current = board[coord(x, 0)];
        if current == EMPTY {
            continue;
        }
		for y = range 1:SIZE {
			if board[coord(x, y)] != current {
                break;
			}
            if y == SIZE - 1 {
                return current;
            
            }
		}
	}
    for y = range 0:SIZE {
        current = board[coord(y, 0)];
        if current == EMPTY {
            continue;
        }
        for x = range 1:SIZE {
            if board[coord(x, y)] != current {
                break;
            }
            if x == SIZE - 1 {
                return current;
            }
        }
    }
    
    var diag int;
    diag = board[coord(0, 0)];
    
    if diag != EMPTY {
        for x = range 1:SIZE {
            if board[coord(x, x)] != diag {
                break;
            }
            if x == SIZE - 1 {
                return diag;
            }
        }
    }
    diag = board[coord(0, SIZE - 1)];
    if diag != EMPTY {
        for x = range 1:SIZE {
            if board[coord(x, SIZE - 1 - x)] != diag {
                break;
            }
            if x == SIZE - 1{
                return diag;
            }
        }
    }
	return TIE;
}

func opposite (x int) int { return x == PLAYER_A ? PLAYER_B : PLAYER_A; }
			
func minimax (player int, board [SIZE * SIZE]int) int
{
	var result int;
	var best int = opposite(player);
    last_board2 = last_board;
    last_board = board;
    //println("Player", player);
    //printBoard(board);
	result = winner(board);
	if result != TIE {
		return result;
    }
    if full(board) {
        return TIE;
    }
	var x int;
	var y int;
	for x = range 0:SIZE {
		for y = range 0:SIZE {
			if board[coord(x, y)] == EMPTY {
				board[coord(x, y)] = player;
				result = minimax(opposite(player), board);
				if result == player {
					return player;
				}
				if result == TIE {
					best = TIE;
				}
				board[coord(x, y)] = EMPTY;
			}
		}
	}
	return best;
}

func main() {
    var    board [SIZE * SIZE]int;
    println("Initial board");
    ar := [1, 0, 0,
           0, 0, 0,
           0, 0, 0];
           
    var x int;
    for x = range 0:SIZE * SIZE {
        board[x] = ar[x];
    }
    
    //board [coord(0, 3)] = PLAYER_A;
    //board [coord(1, 2)] = PLAYER_A;
    //board [coord(2, 1)] = PLAYER_A;
    //board [coord(3, 0)] = PLAYER_A;
    printBoard(board);
    
    var result int = minimax (PLAYER_A, board);
   //var result int = winner (board);
   
    resultString := "";
    match result {
        when TIE:
            resultString = "Tie.";
        when PLAYER_A:
            resultString = "Player A.";
        when PLAYER_B:
            resultString = "Player B.";
    }
    println ("Winner:", resultString);
    println ("Last examined board state.");
    printBoard(last_board);
    printBoard(last_board2);
}
main();

/*
Winner: Player A.
Last examined board state.
0 1 0
0 1 2
0 1 2
---
0 1 2
0 1 2
1 0 2
*/

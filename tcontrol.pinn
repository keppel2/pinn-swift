
ft("Block", "in");
{
    print("in");
}
ft("Two block layer", "in2");
{
    {
        print("in2");
    }
}
ft("No block scoping (fix)?");
{
    {
        x := 5;
    }
}
assert(x, 5);

ft("Empty", "");
;

//Control flow

ft("Bare if");
if true ;
if false bad();

ft("If other");
if true 5;
if false bad();

ft("Else");
if false bad(); else ;





ft("Block");
{}

ft("Block 2");
1;
{
    2;
    {
        3;
    
    }
}




ft("While");
while false {}

ft("If and while");
if false ;
  else
while false {}














// function isolated

ft("Function");
func f() {}

ft("Function 2");
func f() {}
func g() {}

ft("Function return");
func f() int {}

ft("Function parameter");
func f(a int) {}

ft("2 parameters");
func f(a int, b int) {}

ft("Parameter and return (reject?)");
func f(a int) int {}

ft("Function call");
func f() {}



ft("Function call 2");
func fA(a int) {}
func fB(a int, b int) {}
func fC(a, b int) {}
fA(0);
fB(0, 0);
fC(0, 0);

ft("Function call 3");
func f() int {return 12;}
assert(f(), 12);

ft("Call and return");
func f(a int) int {
    return 23;
}
var x int;
x = f(0);
assert(x, 23);
ft("Call and return bools");
func f(a bool) bool {
    return true;
}
var x bool;
x = f(true);

ft("Basics in function");
func f() {
    0;
    42;
    var x int;
    x = 0;
}
f();

ft("Variadic");
func f(v ...int) {}
f(0, 5, 10);








ft("For range string");
var char string;
for char = range "alpha" {
}
var k int;
for k, char = range "bravo" {
}
ft("For range closed interval 11 to 14");
var xRange int;
for xRange = range 11@14 {
}

ft("Continue on evens--print odds");
var xRange86 int;
for xRange86 = range 22@27 {
    if xRange86 % 2 == 0 continue;
}
ft("Break");
s := "";
var xBreak int;
for xBreak = range 101@104 {
    if xBreak == 103 {
    break;
    }
    s += sprint(xBreak, ",");
}
assert(s, "101 ,102 ,");



ft("Deep return");
func deepReturn() int {
    var i int;
    for i = range 202@205 {
        if i == 203 return i;
    }
}
assert(deepReturn(), 203);

ft("3 part for statement");
s := "";
for forX := 10; forX < 15; forX += 2 {
    s += sprint(forX, ",");
}
assert(s, "10 ,12 ,14 ,");

ft("For range key value", "0 abcd.1 xyz.2 hello.");
var key int;
var value string;
arS := ["abcd", "xyz", "hello"];
for key, value = range arS {
    print(key, value);print(".");
}


ft("For loop without init", "In for");
var bFor bool;
for ; bFor != true; bFor = !bFor {
    print("In for");
}



ft("While countdown", "50.40.30.20.");
wh := 50;
while wh > 10 {
    print(wh);
    wh -= 10;
    print(".");
}

ft("Repeat \"ab\" and doubling while len < 8", "ab.abab.");
wstr := "ab";
repeat {
    print(wstr);
    print(".");
    wstr += wstr;
} while len(wstr) < 8;

ft("Slice string", "apn foo oot every");
print("aapnoot"[1:4], "foobar"[@2], "noot"[1:], "every"[0:5]);


ft("Call function", "in f");
func f() { print("in f"); }

f();

ft("Call function with 42, print", "42");
func g(iLocal int) { print(iLocal); }
g(42);

ft("Call variadic", "7,13,101,");
func variadic(i ...int) {
    var x int;
    for x = range i {
        print(x);
        print(",");
    }
}
variadic(7, 13, 101);

ft("Forward call", "forward");

func forward() {
    forwardCalled();
}

func forwardCalled() {
    print("forward");
}
forward();



ft("Call returns", "42");
func returns42() int {
    return 42;
}
print(returns42());

ft("Return exits", "good");
func exits() {
    print("good");
    return;
    print("bad");
}
exits();

ft("Call recursive", "1 ,2 ,3 ,4 ,");
func countToFour(i int) {
    if i > 1 {
        countToFour(i - 1);
    }
    print(i, ",");
}
countToFour(4);

ft("Function with map, slice, variadic", "foo 4210,11,12,13,14,false,false,true,");
func fLots(m [map]int, a []int, vary ...bool) {
var s string;
var i int;
for s, i = range m {
print(s, i);
}
for i = range a {
print(i);
print(",");
}
var b bool;
for b = range vary {
print(b);
print(",");
}
}
var outerm [map]int;
outerm["foo"] = 42;
fLots(outerm, 10@14, false, false, true);

ft("Deep function return", "");
func deep() {
    repeat {
        return;
        print("bad");
    } while false;
}

ft("Guard fail", "fail");
func fguard() {
    guard false else {
        print("fail");
        return;
    }
    print("bad");
}
fguard();




ft("Guard pass", "afterguard");
func fguard2() {
    guard true else {
    print("bad");
    return;
    }
print("afterguard");
}
fguard2();

ft("Chain call", "true");
func call2nd() int {
    return 42;
}
func call1st() bool {
    return call2nd() < 45;
}
print(call1st());

ft("Mutually recurse", "m1,1m2,2m1,4m2,5m1,10m2,11m1,22m2,23m1,46m2,47m1,94m2,95");
MLIMIT := 100;
func mrecurse1(x int) {
    print("m1,");
    print(x);
    x += 1;
    if x < MLIMIT {
        mrecurse2(x);
    }
}
func mrecurse2(i int) {
    print("m2,");
    print(i);
    i *= 2;
    if i < MLIMIT {
        mrecurse1(i);
    }
}
mrecurse1(1);
ft("Return slice of strings","[aap noot mies]");
func returnSliceString() []string {
ar := ...["aap", "noot", "mies"];
return ar;
}
print(returnSliceString());

ft("Match true", "matched");
match true {
when false:
    print("bad");
when true:
    print("matched");
}
ft("Match default", "default");
match 5 {
when 2: print("2, bad");
when 1:
default: print("default");
}
ft("Fallthrough", "start,fell through");
match true {
when true: print("start,");
fallthrough;
when false: print("fell through");
}
ft("Fallthrough default", "match foo,fell through default");
match "foo" {
when "foo":
    print("match foo,");
    fallthrough;
default:
    print("fell through default");
}
ft("Break out of default", "default only,");
match true {
default:
print("default only,");
break;
print("after break");
}
ft("Continue with outer for", "in match,10in match,11in match,12in match,13in match,14");
var deepX int;
for deepX = range 10@14 {
match true {
when true:
print("in match,");
print(deepX);
continue;
}
print("bad");
}

ft("Break with outer for", "in break match,10in break match,11in break match,12in break match,13in break match,14");
var deepX324 int;
for deepX324 = range 10@14 {
match true {
when true:
print("in break match,");
print(deepX324);
break;
print("bad");
}
}

ft("Return from deep match in function", "201,203");
func deepR() int {
var x int;
for x = range 201@204 {
match x {
when 203:
return 203;
when 201:
print("201,");
}
}
}

print(deepR());



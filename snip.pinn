
// Rod cutting
p := [0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30];//, 33, 37, 41];
println("p len", len(p));
func max (a, b int) int { return a > b ? a : b ;}

func cutRod (n int) int {
  if n == 0 {
    return 0;
  }
  var q int;
  q = -1;
  var i int;
  for i = range 1@n {
    q = max(q, p[i] + cutRod(n - i));
  }
  return q;
}
println("go");
var x5 int;
for x5 = range 1:len(p) {
  println(cutRod(x5));
}
//exit();


var r[len(p)]int;
var x int;
for x = range 0:len(r) {
  r[x] = -1;
}
func cutRodMemo(n int) int {
  if r[n] >= 0 {
    return r[n];
  }
  if n == 0 {
    q := 0;
  } else {
    q := -1;
    var i int;
    for i = range 1@n {
      q = max(q, p[i] + cutRodMemo(n - i));
    }
  }
  r[n] = q;
  return q;
}
println("Top memo", cutRodMemo(10));
for x5 = range 1:len(p) {
  println(cutRodMemo(x5));
}

var r2 [len(p)]int;
var s [len(p)]int;
r[0] = 0;
var j, i, q int;
for j = range 1:len(p) {
  q = -1;
  for i = range 1@j {
    if q < p[i] + r2[j - i] {
      q = p[i] + r2[j - i];
      s[j] = i;
    }
//    q = max(q, p[i - 1] + r[j - i]);
  }
  r2[j] = q;
}
println("Piecces");
var sol, pn int;
for sol = range 1:len(p) {
  println("Sol", sol);
  pn = sol;
  while pn > 0 {
    println(s[pn]);
    pn = pn - s[pn];
  }
}
